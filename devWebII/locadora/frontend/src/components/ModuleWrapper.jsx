import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { findModuleConfig } from "../js/utils";
import { carregarBanco } from "../service/api";

const ModuleWrapper = ({ children }) => {
  const { moduleName, id } = useParams();
  const baseConfig = findModuleConfig(moduleName);
  const [data, setData] = useState(baseConfig?.data || []);

  // Fun√ß√£o para gerar n√∫mero aleat√≥rio
  const getRandomInt = (max) => Math.floor(Math.random() * max);

  // Mensagens engra√ßadas
  const mensagensVazias = [
    "Ops! Parece que aqui n√£o tem nada‚Ä¶ nem poeira!",
    "Nada para mostrar‚Ä¶ O fantasma dos dados levou tudo! üëª",
    "Tabela vazia! Hora de adicionar algum conte√∫do, antes que ela fique triste üò¢",
    "Hmm‚Ä¶ nada aqui ainda. Talvez os dados estejam de f√©rias üå¥",
    "Zero dados encontrados. Mas hey, pelo menos o caf√© est√° garantido ‚òï",
    "Aten√ß√£o! Este espa√ßo est√° reservado para dados incr√≠veis que ainda n√£o chegaram üöÄ",
  ];

  // Atualiza automaticamente do backend
  useEffect(() => {
    const fetchData = async () => {
      const result = await carregarBanco(moduleName); // GET /api/{moduleName}
      setData(result);
    };

    fetchData();
    const interval = setInterval(fetchData, 15000); // sincronia autom√°tica
    return () => clearInterval(interval);
  }, [moduleName]);

  // Caso o m√≥dulo n√£o exista
  if (!baseConfig) {
    const mensagemAleatoria = mensagensVazias[getRandomInt(mensagensVazias.length)];
    return <h2>{mensagemAleatoria} ‚Äî m√≥dulo "{moduleName}" n√£o encontrado.</h2>;
  }

  // Caso o m√≥dulo exista mas n√£o tenha dados
  if (data.length === 0) {
    const mensagemAleatoria = mensagensVazias[getRandomInt(mensagensVazias.length)];
    return <h2>{mensagemAleatoria}</h2>;
  }

  console.log("ModuleWrapper recebeu novos dados:", baseConfig.data);
  console.log("ModuleWrapper: Renderizando m√≥dulo", moduleName, baseConfig);

  // Passa moduleConfig atualizado para a p√°gina
  return React.cloneElement(children, {
    moduleConfig: { ...baseConfig, data },
    id,
  });
};

export default ModuleWrapper;