-- üß± Parte 1 ‚Äì Cria√ß√£o das Tabelas (DROP e CRIA√á√ÉO BASE)

DROP TABLE IF EXISTS EXAME_PEDIDO CASCADE;
DROP TABLE IF EXISTS EXAME CASCADE;
DROP TABLE IF EXISTS MATERIAL CASCADE;
DROP TABLE IF EXISTS PEDIDO CASCADE;
DROP TABLE IF EXISTS MEDICO CASCADE;
DROP TABLE IF EXISTS CLIENTE CASCADE;
DROP TABLE IF EXISTS PLANO CASCADE;
DROP TABLE IF EXISTS VALOR_US CASCADE;
DROP TABLE IF EXISTS FATURA CASCADE;
DROP TABLE IF EXISTS EXAME_AUTORIZADO CASCADE;

-- TABELA: MATERIAL
CREATE TABLE MATERIAL (
    idMaterial SERIAL PRIMARY KEY,
    descricao TEXT NOT NULL
);

-- TABELA: EXAME
CREATE TABLE EXAME (
    idExame SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    idMaterial INTEGER REFERENCES MATERIAL(idMaterial),
    dias_previsao INTEGER
);

-- TABELA: MEDICO
CREATE TABLE MEDICO (
    idMedico SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    CRM VARCHAR(20) NOT NULL
);

-- TABELA: CLIENTE
CREATE TABLE CLIENTE (
    idCliente SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    sexo CHAR(1),
    nascimento DATE
);

-- TABELA: PLANO
CREATE TABLE PLANO (
    idPlano SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    perc_cliente NUMERIC(5,2)
);

-- TABELA: VALOR_US
CREATE TABLE VALOR_US (
    idPlano INTEGER REFERENCES PLANO(idPlano),
    data_inicial_vigencia DATE,
    data_final_vigencia DATE,
    valor NUMERIC(10,2),
    PRIMARY KEY (idPlano, data_inicial_vigencia)
);

-- TABELA: FATURA
CREATE TABLE FATURA (
    nr_fatura SERIAL PRIMARY KEY,
    idPlano INTEGER REFERENCES PLANO(idPlano),
    data_geracao DATE,
    data_envio DATE,
    data_pagamento DATE
);

-- TABELA: EXAME_AUTORIZADO
CREATE TABLE EXAME_AUTORIZADO (
    idPlano INTEGER REFERENCES PLANO(idPlano),
    idExame INTEGER REFERENCES EXAME(idExame),
    valor_ch NUMERIC(10,2),
    PRIMARY KEY (idPlano, idExame)
);

-- üß© Parte 2 ‚Äì Particionamento apenas de EXAME_PEDIDO

-- TABELA: PEDIDO (sem particionamento)
CREATE TABLE PEDIDO (
    nrPedido SERIAL PRIMARY KEY,
    data_pedido DATE NOT NULL,
    idMedico INTEGER REFERENCES MEDICO(idMedico),
    idCliente INTEGER REFERENCES CLIENTE(idCliente),
    idPlano INTEGER REFERENCES PLANO(idPlano)
);

-- TABELA: EXAME_PEDIDO (particionada por data_prevista)
CREATE TABLE EXAME_PEDIDO (
    nrPedido INTEGER REFERENCES PEDIDO(nrPedido),
    idExame INTEGER REFERENCES EXAME(idExame),
    data_prevista DATE NOT NULL,
    nr_autorizacao VARCHAR(50),
    data_coleta DATE,
    data_efetiva DATE,
    valor NUMERIC(10,2),
    nr_fatura INTEGER,
    plano INTEGER,
    PRIMARY KEY (nrPedido, idExame, data_prevista)
) PARTITION BY RANGE (data_prevista);

-- Parti√ß√£o para o ano de 2024
CREATE TABLE EXAME_PEDIDO_2024 PARTITION OF EXAME_PEDIDO
    FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');

-- üîç Parte 3 ‚Äì √çndices

CREATE INDEX idx_exame_material ON EXAME(idMaterial);
CREATE INDEX idx_valor_ls_periodo ON VALOR_US(data_inicial_vigencia, data_final_vigencia);
CREATE INDEX idx_examepedido_data ON EXAME_PEDIDO(data_prevista);
CREATE INDEX idx_pedido_cliente ON PEDIDO(idCliente);
CREATE INDEX idx_pedido_data ON PEDIDO(data_pedido);

-- üßÆ Parte 4 ‚Äì Fun√ß√£o CALCULA_VALOR_EXAMES_CLIENTES

CREATE OR REPLACE FUNCTION CALCULA_VALOR_EXAMES_CLIENTES(p_mes INT, p_ano INT)
RETURNS NUMERIC AS $$
DECLARE
    total_valor NUMERIC := 0;
BEGIN
    SELECT SUM(valor)
    INTO total_valor
    FROM EXAME_PEDIDO ep
    JOIN PEDIDO p ON ep.nrPedido = p.nrPedido
    WHERE EXTRACT(MONTH FROM p.data_pedido) = p_mes
      AND EXTRACT(YEAR FROM p.data_pedido) = p_ano
      AND ep.plano IS NULL; -- Apenas clientes (sem plano)

    RETURN COALESCE(total_valor, 0);
END;
$$ LANGUAGE plpgsql;

-- üìù Parte 5 ‚Äì Fun√ß√£o INSERE_PEDIDO

CREATE OR REPLACE FUNCTION INSERE_PEDIDO(
    p_idMedico INTEGER,
    p_idCliente INTEGER,
    p_idPlano INTEGER
) RETURNS INTEGER AS $$
DECLARE
    novo_pedido INTEGER;
BEGIN
    -- Verifica√ß√£o
    IF NOT EXISTS (SELECT 1 FROM MEDICO WHERE idMedico = p_idMedico) THEN
        RAISE EXCEPTION 'M√©dico n√£o encontrado.';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM CLIENTE WHERE idCliente = p_idCliente) THEN
        RAISE EXCEPTION 'Cliente n√£o encontrado.';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM PLANO WHERE idPlano = p_idPlano) THEN
        RAISE EXCEPTION 'Plano n√£o encontrado.';
    END IF;

    -- Inser√ß√£o
    INSERT INTO PEDIDO (data_pedido, idMedico, idCliente, idPlano)
    VALUES (CURRENT_DATE, p_idMedico, p_idCliente, p_idPlano)
    RETURNING nrPedido INTO novo_pedido;

    RETURN novo_pedido;
END;
$$ LANGUAGE plpgsql;
