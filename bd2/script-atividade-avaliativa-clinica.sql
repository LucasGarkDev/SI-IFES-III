-- üß± Parte 0 ‚Äì Cria√ß√£o das Tabelas (DROP e CRIA√á√ÉO BASE)
DROP TABLE IF EXISTS EXAME_PEDIDO CASCADE;
DROP TABLE IF EXISTS EXAME CASCADE;
DROP TABLE IF EXISTS MATERIAL CASCADE;
DROP TABLE IF EXISTS PEDIDO CASCADE;
DROP TABLE IF EXISTS MEDICO CASCADE;
DROP TABLE IF EXISTS CLIENTE CASCADE;
DROP TABLE IF EXISTS PLANO CASCADE;
DROP TABLE IF EXISTS VALOR_US CASCADE;
DROP TABLE IF EXISTS FATURA CASCADE;
DROP TABLE IF EXISTS EXAME_AUTORIZADO CASCADE;
DROP SEQUENCE IF EXISTS seq_nrPedido;

-- üî¢ Cria√ß√£o da sequ√™ncia para NR_PEDIDO
CREATE SEQUENCE seq_nrPedido START 1;

-- TABELA: MATERIAL
CREATE TABLE MATERIAL (
    idMaterial SERIAL PRIMARY KEY,
    descricao TEXT NOT NULL
);

-- Exemplos:
INSERT INTO MATERIAL (descricao) VALUES ('Sangue'), ('Urina');

-- Verificando dados inseridos:
SELECT * FROM MATERIAL;

-- TABELA: EXAME
CREATE TABLE EXAME (
    idExame SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    idMaterial INTEGER REFERENCES MATERIAL(idMaterial),
    dias_previsao INTEGER
);

-- Exemplos:
INSERT INTO EXAME (nome, idMaterial, dias_previsao)
VALUES 
  ('Hemograma Completo', 1, 2),
  ('Beta-HCG', 2, 3),
  ('PSA - Ant√≠geno Prost√°tico Espec√≠fico', 1, 2);

-- Verificando dados inseridos:
SELECT * FROM EXAME;

-- TABELA: MEDICO
CREATE TABLE MEDICO (
    idMedico SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    CRM VARCHAR(20) NOT NULL
);

-- Exemplos:
INSERT INTO MEDICO (nome, CRM) VALUES ('Dr. Jo√£o Silva', '123456-ES');

-- Verificando dados inseridos:
SELECT * FROM MEDICO;

-- TABELA: CLIENTE
CREATE TABLE CLIENTE (
    idCliente SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    sexo CHAR(1),
    nascimento DATE
);

-- Exemplos:
INSERT INTO CLIENTE (nome, sexo, nascimento)
VALUES
  ('Ana Paula', 'F', '1990-05-10'),
  ('Carlos Eduardo', 'M', '1980-08-22'),
  ('Dona Geralda', 'F', '1950-03-15');

-- Verificando dados inseridos:
SELECT * FROM CLIENTE;

-- TABELA: PLANO
CREATE TABLE PLANO (
    idPlano SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    perc_cliente NUMERIC(5,2)
);

-- Exemplos:
INSERT INTO PLANO (nome, perc_cliente) VALUES ('Plano Ouro', 30.0), ('Plano Prata', 50.0);

-- Verificando dados inseridos:
SELECT * FROM PLANO;

-- TABELA: VALOR_US
CREATE TABLE VALOR_US (
    idPlano INTEGER REFERENCES PLANO(idPlano),
    data_inicial_vigencia DATE,
    data_final_vigencia DATE,
    valor NUMERIC(10,2),
    PRIMARY KEY (idPlano, data_inicial_vigencia)
);

-- Exemplos:
INSERT INTO VALOR_US (idPlano, data_inicial_vigencia, data_final_vigencia, valor)
VALUES 
  (1, '2024-01-01', '2026-12-31', 1.25),
  (2, '2024-01-01', '2026-12-31', 1.10);

-- Verificando dados inseridos:
SELECT * FROM VALOR_US;

-- TABELA: FATURA
CREATE TABLE FATURA (
    nr_fatura SERIAL PRIMARY KEY,
    idPlano INTEGER REFERENCES PLANO(idPlano),
    data_geracao DATE,
    data_envio DATE,
    data_pagamento DATE
);

-- Sem inser√ß√£o inicial. Quando usar: via procedure FECHAR_FATURA_MES.

-- TABELA: EXAME_AUTORIZADO
CREATE TABLE EXAME_AUTORIZADO (
    idPlano INTEGER REFERENCES PLANO(idPlano),
    idExame INTEGER REFERENCES EXAME(idExame),
    valor_ch NUMERIC(10,2),
    PRIMARY KEY (idPlano, idExame)
);

-- Exemplos:
INSERT INTO EXAME_AUTORIZADO (idPlano, idExame, valor_ch)
VALUES 
  (1, 1, 10.0),
  (1, 2, 15.0),
  (2, 1, 12.0),
  (2, 3, 20.0);

-- Verificando dados inseridos:
SELECT * FROM EXAME_AUTORIZADO;

-- üß© Parte 1 ‚Äì Particionamento de PEDIDO por RANGE de data_pedido

-- TABELA M√ÉE: PEDIDO
CREATE TABLE PEDIDO (
    nrPedido INTEGER,
    data_pedido DATE NOT NULL,
    idMedico INTEGER REFERENCES MEDICO(idMedico),
    idCliente INTEGER REFERENCES CLIENTE(idCliente),
    idPlano INTEGER NOT NULL REFERENCES PLANO(idPlano),
    UNIQUE (nrPedido, data_pedido)
) PARTITION BY RANGE (data_pedido);

-- PARTI√á√ÉO: PEDIDO_2023
CREATE TABLE PEDIDO_2023 PARTITION OF PEDIDO
FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');

-- Inserindo valores em PEDIDO_2023
INSERT INTO PEDIDO (nrPedido, data_pedido, idMedico, idCliente, idPlano)
VALUES (101, '2023-04-15', 1, 1, 1);

-- Verificando valores inseridos
SELECT * FROM PEDIDO_2023;

-- PARTI√á√ÉO: PEDIDO_2024
CREATE TABLE PEDIDO_2024 PARTITION OF PEDIDO
FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');

-- Inserindo valores em PEDIDO_2024
INSERT INTO PEDIDO (nrPedido, data_pedido, idMedico, idCliente, idPlano)
VALUES (102, '2024-06-10', 1, 2, 1);

-- Verificando valores inseridos
SELECT * FROM PEDIDO_2024;

-- PARTI√á√ÉO: PEDIDO_2025
CREATE TABLE PEDIDO_2025 PARTITION OF PEDIDO
FOR VALUES FROM ('2025-01-01') TO ('2026-01-01');

-- Inserindo valores em PEDIDO_2025
INSERT INTO PEDIDO (nrPedido, data_pedido, idMedico, idCliente, idPlano)
VALUES (103, '2025-09-01', 1, 3, 2);

-- Verificando valores inseridos
SELECT * FROM PEDIDO_2025;

-- Verifica√ß√£o da estrutura geral das parti√ß√µes de PEDIDO
SELECT inhrelid::regclass AS particao
FROM pg_inherits
WHERE inhparent = 'pedido'::regclass;

-- =====================================================
-- TABELA M√ÉE: EXAME_PEDIDO (particionada por data_prevista)
CREATE TABLE EXAME_PEDIDO (
    nrPedido INTEGER,
    data_pedido DATE NOT NULL,
    idExame INTEGER REFERENCES EXAME(idExame),
    data_prevista DATE NOT NULL,
    nr_autorizacao VARCHAR(50),
    data_coleta DATE,
    data_efetiva DATE,
    valor NUMERIC(10,2),
    nr_fatura INTEGER,
    plano INTEGER,
    FOREIGN KEY (nrPedido, data_pedido) REFERENCES PEDIDO(nrPedido, data_pedido)
) PARTITION BY RANGE (data_prevista);

-- PARTI√á√ÉO: EXAME_PEDIDO_2023
CREATE TABLE EXAME_PEDIDO_2023 PARTITION OF EXAME_PEDIDO
    FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');

-- Inserindo valores em EXAME_PEDIDO_2023
INSERT INTO EXAME_PEDIDO (nrPedido, data_pedido, idExame, data_prevista, valor)
VALUES (101, '2023-04-15', 1, '2023-04-17', 25.00);

-- Verificando valores inseridos
SELECT * FROM EXAME_PEDIDO_2023;

-- PARTI√á√ÉO: EXAME_PEDIDO_2024
CREATE TABLE EXAME_PEDIDO_2024 PARTITION OF EXAME_PEDIDO
    FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');

-- Inserindo valores em EXAME_PEDIDO_2024
INSERT INTO EXAME_PEDIDO (nrPedido, data_pedido, idExame, data_prevista, valor)
VALUES (102, '2024-06-10', 2, '2024-06-12', 45.00);

-- Verificando valores inseridos
SELECT * FROM EXAME_PEDIDO_2024;

-- PARTI√á√ÉO: EXAME_PEDIDO_2025
CREATE TABLE EXAME_PEDIDO_2025 PARTITION OF EXAME_PEDIDO
    FOR VALUES FROM ('2025-01-01') TO ('2026-01-01');

-- Inserindo valores em EXAME_PEDIDO_2025
INSERT INTO EXAME_PEDIDO (nrPedido, data_pedido, idExame, data_prevista, valor)
VALUES (103, '2025-09-01', 3, '2025-09-02', 55.00);

-- Verificando valores inseridos
SELECT * FROM EXAME_PEDIDO_2025;

-- Verifica√ß√£o da estrutura geral das parti√ß√µes de EXAME_PEDIDO
SELECT inhrelid::regclass AS particao
FROM pg_inherits
WHERE inhparent = 'exame_pedido'::regclass;

-- üîç Parte 2 ‚Äì √çndices

CREATE INDEX idx_exame_material ON EXAME(idMaterial);
CREATE INDEX idx_valor_ls_periodo ON VALOR_US(data_inicial_vigencia, data_final_vigencia);
CREATE INDEX idx_examepedido_data ON EXAME_PEDIDO(data_prevista);

-- üîé [TESTE] Avalia√ß√£o do √≠ndice em PEDIDO(idCliente)

-- üîª Passo 1 ‚Äì Garantir que o √≠ndice ainda n√£o existe
DROP INDEX IF EXISTS idx_pedido_cliente;

-- üîª Passo 2 ‚Äì Consulta sem √≠ndice (vai for√ßar um Seq Scan)
EXPLAIN ANALYZE
SELECT *
FROM PEDIDO
WHERE idCliente = 1;

-- üîª Passo 3 ‚Äì Criar o √≠ndice
CREATE INDEX idx_pedido_cliente ON PEDIDO(idCliente);

-- üîª Passo 4 ‚Äì Consulta ap√≥s criar o √≠ndice (espera-se Index Scan)
EXPLAIN ANALYZE
SELECT *
FROM PEDIDO
WHERE idCliente = 1;

CREATE INDEX idx_pedido_data ON PEDIDO(data_pedido);

-- üìù Parte 3 ‚Äì Fun√ß√£o CALCULA_VALOR_EXAMES_CLIENTES

CREATE OR REPLACE FUNCTION CALCULA_VALOR_EXAMES_CLIENTES(p_mes INT, p_ano INT)
RETURNS NUMERIC AS $$
DECLARE
    total_valor NUMERIC := 0;
BEGIN
    SELECT SUM(ep.valor)
    INTO total_valor
    FROM EXAME_PEDIDO ep
    JOIN PEDIDO p ON ep.nrPedido = p.nrPedido AND ep.data_pedido = p.data_pedido
    WHERE EXTRACT(MONTH FROM p.data_pedido) = p_mes
      AND EXTRACT(YEAR FROM p.data_pedido) = p_ano
      AND ep.plano IS NULL;

    RETURN COALESCE(total_valor, 0);
END;
$$ LANGUAGE plpgsql;

-- üß™ Exemplo:
-- üîÑ Inserindo pedido pago pelo PLANO DE SA√öDE (n√£o deve entrar no c√°lculo)
-- Ana Paula, plano 1, data em abril de 2024 (cai na parti√ß√£o PEDIDO_2024)
INSERT INTO PEDIDO (nrPedido, data_pedido, idMedico, idCliente, idPlano)
VALUES (201, '2024-04-15', 1, 1, 1);

-- Exame vinculado ao pedido 201, com valor
INSERT INTO EXAME_PEDIDO (nrPedido, data_pedido, idExame, data_prevista, valor, plano)
VALUES (201, '2024-04-15', 1, '2024-04-16', 100.00, 1);

-- üîÑ Inserindo pedido pago pelo CLIENTE (deve entrar no c√°lculo)
-- Carlos Eduardo, plano pago pelo pr√≥prio cliente, data em abril de 2024
INSERT INTO PEDIDO (nrPedido, data_pedido, idMedico, idCliente, idPlano)
VALUES (202, '2024-04-20', 1, 2, 2);

-- Exame vinculado ao pedido 202, valor pago diretamente (plano IS NULL)
INSERT INTO EXAME_PEDIDO (nrPedido, data_pedido, idExame, data_prevista, valor, plano)
VALUES (202, '2024-04-20', 2, '2024-04-21', 80.00, NULL);

-- üîÑ Outro exame pago por CLIENTE no mesmo m√™s
INSERT INTO EXAME_PEDIDO (nrPedido, data_pedido, idExame, data_prevista, valor, plano)
VALUES (202, '2024-04-20', 1, '2024-04-22', 120.00, NULL);

-- ‚úÖ Consulta: valor total de exames pagos diretamente pelos clientes em abril de 2024
SELECT CALCULA_VALOR_EXAMES_CLIENTES(4, 2024) AS valor_pago_clientes;

-- üìù Parte 4 ‚Äì Fun√ß√£o INSERE_PEDIDO
CREATE OR REPLACE FUNCTION INSERE_PEDIDO(
    p_idMedico INTEGER,
    p_idCliente INTEGER,
    p_idPlano INTEGER
) RETURNS INTEGER AS $$
DECLARE
    novo_pedido INTEGER;
BEGIN
    -- Verifica√ß√µes
    IF NOT EXISTS (SELECT 1 FROM MEDICO WHERE idMedico = p_idMedico) THEN
        RAISE EXCEPTION 'M√©dico n√£o encontrado.';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM CLIENTE WHERE idCliente = p_idCliente) THEN
        RAISE EXCEPTION 'Cliente n√£o encontrado.';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM PLANO WHERE idPlano = p_idPlano) THEN
        RAISE EXCEPTION 'Plano n√£o encontrado.';
    END IF;

    -- Gera√ß√£o de nrPedido via sequence
    SELECT nextval('seq_nrPedido') INTO novo_pedido;

    -- Inser√ß√£o na tabela particionada
    INSERT INTO PEDIDO (nrPedido, data_pedido, idMedico, idCliente, idPlano)
    VALUES (novo_pedido, CURRENT_DATE, p_idMedico, p_idCliente, p_idPlano);

    RETURN novo_pedido;
END;
$$ LANGUAGE plpgsql;

-- üß™ Exemplo:
-- üü¢ CASO 1: INSER√á√ÉO CORRETA
-- Esperado: sucesso. Cria um novo pedido com IDs v√°lidos.
-- M√©d. Jo√£o (1), Cliente Ana Paula (1), Plano Ouro (1)

SELECT INSERE_PEDIDO(1, 1, 1) AS resultado_ok;

-- üî¥ CASO 2: M√âDICO INEXISTENTE
-- Esperado: erro 'M√©dico n√£o encontrado.'
-- M√©d. 999 n√£o existe, Cliente 1, Plano 1

SELECT INSERE_PEDIDO(999, 1, 1);

-- üî¥ CASO 3: CLIENTE INEXISTENTE
-- Esperado: erro 'Cliente n√£o encontrado.'
-- M√©d. 1, Cliente 999 n√£o existe, Plano 1

SELECT INSERE_PEDIDO(1, 999, 1);

-- üî¥ CASO 4: PLANO INEXISTENTE
-- Esperado: erro 'Plano n√£o encontrado.'
-- M√©d. 1, Cliente 1, Plano 999 n√£o existe

SELECT INSERE_PEDIDO(1, 1, 999);

-- üü° CASO 5: INSER√á√ÉO COM NOVO CLIENTE CADASTRADO NA HORA
-- Primeiro insere novo cliente e depois faz o pedido

INSERT INTO CLIENTE (nome, sexo, nascimento) VALUES ('Roberta Nunes', 'F', '1985-11-25');

-- Verifica o id gerado (digamos que foi 4)
SELECT idCliente FROM CLIENTE WHERE nome = 'Roberta Nunes';

-- Faz o pedido para essa nova cliente com dados v√°lidos
SELECT INSERE_PEDIDO(1, 4, 1) AS resultado_roberta;

-- üßÆ Parte 5 ‚Äì STORED PROCEDURE INSERE_EXAME_PEDIDO

CREATE OR REPLACE PROCEDURE INSERE_EXAME_PEDIDO(
    p_nrPedido INTEGER,
    p_dataPedido DATE,
    p_idExame INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    id_plano INTEGER;
    valor_us NUMERIC;
    v_valor_ch NUMERIC;
BEGIN
    -- 1. Verifica se o pedido existe e obt√©m o plano associado
    SELECT idPlano INTO id_plano
    FROM PEDIDO
    WHERE nrPedido = p_nrPedido AND data_pedido = p_dataPedido;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Pedido n√£o encontrado';
    END IF;

    -- 2. Verifica se o exame existe
    IF NOT EXISTS (SELECT 1 FROM EXAME WHERE idExame = p_idExame) THEN
        RAISE EXCEPTION 'Exame n√£o encontrado';
    END IF;

    -- 3. Verifica se o exame √© autorizado para o plano
    SELECT valor_ch INTO v_valor_ch
    FROM EXAME_AUTORIZADO
    WHERE idPlano = id_plano AND idExame = p_idExame;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Exame n√£o autorizado para este plano';
    END IF;

    -- 4. Busca o valor US vigente com base na data do pedido (e n√£o na data atual!)
    SELECT valor INTO valor_us
    FROM VALOR_US
    WHERE idPlano = id_plano
      AND p_dataPedido BETWEEN data_inicial_vigencia AND data_final_vigencia
    LIMIT 1;

    IF valor_us IS NULL THEN
        RAISE EXCEPTION 'Valor US n√£o encontrado para o plano na data do pedido';
    END IF;

    -- 5. Insere o exame vinculado ao pedido com o valor calculado
    INSERT INTO EXAME_PEDIDO (
        nrPedido, data_pedido, idExame, data_prevista, valor
    ) VALUES (
        p_nrPedido, p_dataPedido, p_idExame, CURRENT_DATE, v_valor_ch * valor_us
    );
END;
$$;

-- üß™ Exemplo:
-- ‚úÖ Inser√ß√£o v√°lida
-- Pedido 101 (2023-04-15), Exame 1 (Hemograma), autorizado para plano 1
CALL INSERE_EXAME_PEDIDO(101, '2023-04-15', 1);

-- üîé Verifica se o exame foi inserido
SELECT * FROM EXAME_PEDIDO WHERE nrPedido = 101;

-- ‚ùå ERRO: Pedido inexistente
CALL INSERE_EXAME_PEDIDO(999, '2024-04-15', 1);
-- Esperado: 'Pedido n√£o encontrado'

-- ‚ùå ERRO: Exame inexistente
CALL INSERE_EXAME_PEDIDO(101, '2023-04-15', 999);
-- Esperado: 'Exame n√£o encontrado'

-- ‚ùå ERRO: Exame n√£o autorizado para o plano do pedido
CALL INSERE_EXAME_PEDIDO(101, '2023-04-15', 3);
-- Esperado: 'Exame n√£o autorizado para este plano'

-- ‚ö†Ô∏è Simula aus√™ncia de valor vigente no per√≠odo
UPDATE VALOR_US
SET data_inicial_vigencia = '2025-01-01', data_final_vigencia = '2025-12-31'
WHERE idPlano = 1;

-- ‚ùå ERRO: Sem valor US vigente na data do pedido
CALL INSERE_EXAME_PEDIDO(101, '2023-04-15', 1);
-- Esperado: 'Valor US n√£o encontrado para o plano na data do pedido'

-- üîÅ Corrige valor US para restaurar funcionamento normal
UPDATE VALOR_US
SET data_inicial_vigencia = '2024-01-01', data_final_vigencia = '2026-12-31'
WHERE idPlano = 1;

-- üîé Verifica√ß√£o final
SELECT * FROM EXAME_PEDIDO
ORDER BY data_prevista DESC;

-- üõë Parte 6 ‚Äì RULE para impedir exame de gravidez (Beta-HCG) para homens

CREATE OR REPLACE RULE impedir_gravidez_homens AS
ON INSERT TO EXAME_PEDIDO
WHERE (
    NEW.idExame = (SELECT idExame FROM EXAME WHERE nome ILIKE '%beta-hcg%' LIMIT 1)
    AND EXISTS (
        SELECT 1 FROM PEDIDO p
        JOIN CLIENTE c ON p.idCliente = c.idCliente
        WHERE p.nrPedido = NEW.nrPedido AND p.data_pedido = NEW.data_pedido AND c.sexo = 'M'
    )
)
DO INSTEAD NOTHING;

-- üß™ Exemplo completo de teste

DO $$
DECLARE
    v_nrPedido INTEGER;
BEGIN
    -- üîπ Passo 1: Cria o pedido para Carlos Eduardo (sexo M)
    v_nrPedido := INSERE_PEDIDO(1, 2, 1);  -- m√©dico 1, cliente 2, plano 1
    RAISE NOTICE 'Pedido criado: %', v_nrPedido;

    -- üîπ Passo 2: Tenta inserir Beta-HCG ‚Üí Deve ser bloqueado silenciosamente
    BEGIN
        CALL INSERE_EXAME_PEDIDO(v_nrPedido, CURRENT_DATE, 2);  -- exame Beta-HCG
        RAISE NOTICE 'Inser√ß√£o conclu√≠da (esperado: bloqueio pela RULE)';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Erro inesperado: %', SQLERRM;
    END;

    -- üîπ Passo 3: Verifica se o exame foi mesmo inserido
    PERFORM 1 FROM EXAME_PEDIDO ep
    JOIN EXAME e ON ep.idExame = e.idExame
    WHERE ep.nrPedido = v_nrPedido AND e.nome ILIKE '%beta-hcg%';

    IF FOUND THEN
        RAISE NOTICE '‚ùå ERRO: Exame Beta-HCG foi inserido (isso n√£o deveria acontecer)';
    ELSE
        RAISE NOTICE '‚úÖ SUCESSO: Exame Beta-HCG N√ÉO foi inserido (regra funcionou)';
    END IF;

END $$;


-- üõë Parte 7 ‚Äì RULE para impedir gravidez para mulheres com 65 anos ou mais

CREATE OR REPLACE RULE impedir_gravidez_idosas AS
ON INSERT TO EXAME_PEDIDO
WHERE (
    NEW.idExame = (SELECT idExame FROM EXAME WHERE nome ILIKE '%beta-hcg%' LIMIT 1)
    AND EXISTS (
        SELECT 1 FROM PEDIDO p
        JOIN CLIENTE c ON p.idCliente = c.idCliente
        WHERE p.nrPedido = NEW.nrPedido AND p.data_pedido = NEW.data_pedido
          AND c.sexo = 'F'
          AND AGE(c.nascimento) >= INTERVAL '65 years'
    )
)
DO INSTEAD NOTHING;

-- üß™ Exemplo:
-- üß™ Teste da RULE impedir_gravidez_idosas
-- üëµ Cliente: Dona Geralda (idCliente = 3, sexo = 'F', nascimento = 1950)
-- üë®‚Äç‚öïÔ∏è M√©dico: Dr. Jo√£o (idMedico = 1)
-- üßæ Plano: Ouro (idPlano = 1)

DO $$
DECLARE
    v_nrPedido INTEGER;
BEGIN
    -- üîπ Passo 1: Criar um pedido para Dona Geralda
    v_nrPedido := INSERE_PEDIDO(1, 3, 1);  -- m√©dico 1, cliente 3, plano 1
    RAISE NOTICE 'Pedido criado para Dona Geralda: %', v_nrPedido;

    -- üîπ Passo 2: Tentar inserir exame Beta-HCG (idExame = 2)
    BEGIN
        CALL INSERE_EXAME_PEDIDO(v_nrPedido, CURRENT_DATE, 2);
        RAISE NOTICE 'Inser√ß√£o conclu√≠da (esperado: bloqueio pela RULE)';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Erro inesperado: %', SQLERRM;
    END;

    -- üîπ Passo 3: Verificar se exame Beta-HCG foi inserido
    PERFORM 1 FROM EXAME_PEDIDO ep
    JOIN EXAME e ON ep.idExame = e.idExame
    WHERE ep.nrPedido = v_nrPedido AND e.nome ILIKE '%beta-hcg%';

    IF FOUND THEN
        RAISE NOTICE '‚ùå ERRO: Beta-HCG foi inserido para idosa (isso n√£o deveria ocorrer)';
    ELSE
        RAISE NOTICE '‚úÖ SUCESSO: Beta-HCG N√ÉO foi inserido para idosa (regra funcionou)';
    END IF;

END $$;


-- üõë Parte 8 ‚Äì RULE para impedir exame de pr√≥stata (PSA) para mulheres

CREATE OR REPLACE RULE impedir_psa_mulheres AS
ON INSERT TO EXAME_PEDIDO
WHERE (
    NEW.idExame = (SELECT idExame FROM EXAME WHERE nome ILIKE '%psa%' LIMIT 1)
    AND EXISTS (
        SELECT 1 FROM PEDIDO p
        JOIN CLIENTE c ON p.idCliente = c.idCliente
        WHERE p.nrPedido = NEW.nrPedido AND p.data_pedido = NEW.data_pedido AND c.sexo = 'F'
    )
)
DO INSTEAD NOTHING;

-- üë§ Cliente: Ana Paula (idCliente = 1, sexo = 'F')
-- üßë M√©dico: Dr. Jo√£o (idMedico = 1)
-- üìÑ Plano: Ouro (idPlano = 1)
-- üß™ Exame PSA (idExame = 3)

DO $$
DECLARE
    v_nrPedido INTEGER;
BEGIN
    -- Passo 1: Criar pedido v√°lido para Ana Paula
    v_nrPedido := INSERE_PEDIDO(1, 1, 1);
    RAISE NOTICE 'Pedido criado para Ana Paula: %', v_nrPedido;

    -- Passo 2: Tentar inserir exame PSA ‚Üí Deve ser BLOQUEADO pela RULE
    BEGIN
        CALL INSERE_EXAME_PEDIDO(v_nrPedido, CURRENT_DATE, 3);
        RAISE NOTICE '‚ùå ERRO: PSA foi inserido para mulher (isso n√£o deveria ocorrer)';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚úÖ Inser√ß√£o bloqueada com sucesso pela RULE (como esperado)';
    END;

    -- Passo 3: Verificar se o exame PSA foi inserido mesmo assim
    PERFORM 1
    FROM EXAME_PEDIDO ep
    JOIN EXAME e ON ep.idExame = e.idExame
    WHERE ep.nrPedido = v_nrPedido AND e.nome ILIKE '%psa%';

    IF FOUND THEN
        RAISE NOTICE '‚ùå ERRO: Exame PSA foi inserido para mulher ‚Äî isso n√£o deveria ocorrer';
    ELSE
        RAISE NOTICE '‚úÖ Exame PSA n√£o foi inserido para mulher ‚Äî comportamento correto';
    END IF;
END $$;



-- üîÑ Parte 9 ‚Äì PROCEDURE FECHAR_FATURA_MES

CREATE OR REPLACE PROCEDURE FECHAR_FATURA_MES(
    p_mes INT,
    p_ano INT,
    p_idPlano INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    nova_fatura_id INTEGER;
BEGIN
    INSERT INTO FATURA (idPlano, data_geracao)
    VALUES (p_idPlano, CURRENT_DATE)
    RETURNING nr_fatura INTO nova_fatura_id;

    UPDATE EXAME_PEDIDO ep
    SET nr_fatura = nova_fatura_id
    FROM PEDIDO p
    WHERE ep.nr_fatura IS NULL
      AND ep.nrPedido = p.nrPedido
      AND ep.data_pedido = p.data_pedido
      AND EXTRACT(MONTH FROM p.data_pedido) = p_mes
      AND EXTRACT(YEAR FROM p.data_pedido) = p_ano
      AND p.idPlano = p_idPlano;
END;
$$;

-- üß™ Exemplo:
-- ‚úÖ CEN√ÅRIO 1: Faturar exames do Plano Ouro (1) em abril de 2024
-- Deve atualizar exames sem fatura vinculados a esse plano e per√≠odo

CALL FECHAR_FATURA_MES(4, 2024, 1);

-- Verifica os exames atualizados com fatura no per√≠odo
SELECT ep.*, f.data_geracao
FROM EXAME_PEDIDO ep
JOIN FATURA f ON ep.nr_fatura = f.nr_fatura
WHERE EXTRACT(MONTH FROM ep.data_pedido) = 4
  AND EXTRACT(YEAR FROM ep.data_pedido) = 2024
  AND f.idPlano = 1;

-- üîÅ CEN√ÅRIO 2: Repetir chamada ‚Äî exames j√° faturados n√£o devem ser afetados

CALL FECHAR_FATURA_MES(4, 2024, 1);

-- Resultado: nenhuma linha nova deve ser atualizada (j√° foram faturadas antes)

-- ‚ùå CEN√ÅRIO 3: Tentar faturar m√™s onde n√£o h√° exames realizados

CALL FECHAR_FATURA_MES(1, 2022, 1);  -- Esperado: cria a fatura mas n√£o associa nenhum exame

-- Verifica se h√° exames associados
SELECT * FROM EXAME_PEDIDO WHERE nr_fatura IN (
    SELECT nr_fatura FROM FATURA WHERE EXTRACT(MONTH FROM data_geracao) = 1 AND EXTRACT(YEAR FROM data_geracao) = 2022
);

-- ‚úÖ CEN√ÅRIO 4: Visualizar todas as faturas e exames faturados
SELECT f.nr_fatura, f.idPlano, f.data_geracao, COUNT(ep.*) AS qtd_exames
FROM FATURA f
LEFT JOIN EXAME_PEDIDO ep ON f.nr_fatura = ep.nr_fatura
GROUP BY f.nr_fatura, f.idPlano, f.data_geracao
ORDER BY f.data_geracao DESC;

-- üóëÔ∏è CEN√ÅRIO 5: Verificar exames que ainda n√£o foram faturados
SELECT * FROM EXAME_PEDIDO WHERE nr_fatura IS NULL;
